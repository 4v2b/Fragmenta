import i18n from 'i18next';
import { initReactI18next } from 'react-i18next';

// import Backend from 'i18next-http-backend';
// import LanguageDetector from 'i18next-browser-languagedetector';
// don't want to use this?
// have a look at the Quick start guide 
// for passing in lng and translations on init

export function changeLanguage(lng) {
    i18n.changeLanguage(lng);
    localStorage.setItem('userLanguage', lng);
};

i18n
    // .use(Backend)

    // .use(LanguageDetector)
    .use(initReactI18next)
    .init({
        fallbackLng: 'en',
        debug: true,
        lng: localStorage.getItem('userLanguage') || 'en',
        interpolation: {
            escapeValue: false, // not needed for react as it escapes by default
        },
        resources: {
            en: {
                translation: {
                    // Group related translations into more specific namespaces
                    roles: {
                        admin: "Admin",
                        owner: "Owner",
                        member: "Member",
                        guest: "Guest"
                    },
                    common: {
                        greeting: "Welcome on the main page ü§ó",
                        createWorkspace: "Create workspace",
                        workspaceStub: "None",
                        boards: "Boards",
                        members: "Members",
                        general: "General"
                    },
                    fields: {
                        priority: {
                            priority0: "None",
                            priority1: "High",
                            priority2: "Medium",
                            priority3: "Low",  
                        },
                        labels: {
                            required: "This field is required",
                            addTask: "Add task",
                            selPriority: "Select prioirty",
                            title: "Title",
                            desc: "Description",
                            tags: "Tags",
                            priority: "Prioirity",
                            dueDate: "Due date",
                            assignee: "Assignee",
                            name: "Name",
                            email: "Email",
                            password: "Password",
                            repeatPassword: "Repeat password"
                        },
                        actions: {
                            cancel: "Cancel",
                            save: "Save",
                            create: "Create",
                            login: "Login",
                            register: "Register",
                            logout: "Log out",
                            delete: "Delete",
                            addMembers: "Add members",
                            findUser: "Find user"
                        }
                    },
                    auth: {
                        prompts: {
                            toLogin: "Already have an account?",
                            toRegister: "Do not have any account?"
                        }
                    }
                }
            },
            uk: {
                translation: {
                    roles: {
                        admin: "–ê–¥–º—ñ–Ω",
                        owner: "–í–ª–∞—Å–Ω–∏–∫",
                        member: "–£—á–∞—Å–Ω–∏–∫",
                        guest: "–ì—ñ—Å—Ç—å"
                    },
                    common: {
                        greeting: "–í—ñ—Ç–∞—î–º–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ ü§ó",
                        createWorkspace: "–ù–æ–≤–∏–π —Ä–æ–±–æ—á–∏–π –ø—Ä–æ—Å—Ç—ñ—Ä",
                        workspaceStub: "–ù–µ –æ–±—Ä–∞–Ω–æ",
                        boards: "–î–æ—à–∫–∏",
                        members: "–£—á–∞—Å–Ω–∏–∫–∏",
                        general: "–ó–∞–≥–∞–ª—å–Ω–µ"
                    },
                    fields: {
                        priority: {
                            priority0: "–ù–µ–º–∞—î",
                            priority1: "–í–∏—Å–æ–∫–∏–π",
                            priority2: "–°–µ—Ä–µ–¥–Ω—ñ–π",
                            priority3: "–ù–∏–∑—å–∫–∏–π",  
                        },
                        labels: {
                            required: "–¶–µ –ø–æ–ª–µ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º",
                            addTask: "–î–æ–¥–∞—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è",
                            selPriority: "–û–±–µ—Ä—ñ—Ç—å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                            title: "–ù–∞–∑–≤–∞",
                            desc: "–û–ø–∏—Å",
                            tags: "Tags",
                            dueDate: "–î–µ–¥–ª–∞–π–Ω",
                            assignee: "–í–∏–∫–æ–Ω–∞–≤–µ—Ü—å",
                            priority: "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
                            name: "–Ü–º'—è",
                            email: "–ï–ª. –ø–æ—à—Ç–∞",
                            password: "–ü–∞—Ä–æ–ª—å",
                            repeatPassword: "–ü–æ–≤—Ç–æ—Ä—ñ—Ç—å –ø–∞—Ä–æ–ª—å"
                        },
                        actions: {
                            cancel: "–í—ñ–¥–º—ñ–Ω–∏—Ç–∏",
                            save: "–ó–±–µ—Ä–µ–≥—Ç–∏",
                            create: "–°—Ç–≤–æ—Ä–∏—Ç–∏",
                            login: "–£–≤—ñ–π—Ç–∏",
                            register: "–ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è",
                            logout: "–í–∏–π—Ç–∏",
                            delete: "–í–∏–¥–∞–ª–∏—Ç–∏",
                            addMembers: "–î–æ–¥–∞—Ç–∏ —É—á–∞—Å–Ω–∏–∫—ñ–≤",
                            findUser: "–ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"
                        }
                    },
                    auth: {
                        prompts: {
                            toLogin: "–í–∂–µ –º–∞—î—Ç–µ –æ–±–ª—ñ–∫–æ–≤–∏–π –∑–∞–ø–∏—Å?",
                            toRegister: "–ù–µ –º–∞—î—Ç–µ –æ–±–ª—ñ–∫–æ–≤–æ–≥–æ –∑–∞–ø–∏—Å—É?"
                        }
                    }
                }
            }
        }
    });


export default i18n;