// <auto-generated />
using System;
using Fragmenta.Dal;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Fragmenta.Dal.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250414195133_SeedAttachmentTypes")]
    partial class SeedAttachmentTypes
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Fragmenta.Dal.Models.AllowedType", b =>
                {
                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("BoardId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("AllowedTypes", (string)null);
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Attachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("OriginalName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TaskId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.AttachmentType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("AttachmentTypes");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Value = "Any"
                        },
                        new
                        {
                            Id = 11L,
                            ParentId = 1L,
                            Value = "Documents"
                        },
                        new
                        {
                            Id = 12L,
                            ParentId = 1L,
                            Value = "Images"
                        },
                        new
                        {
                            Id = 13L,
                            ParentId = 1L,
                            Value = "Audio"
                        },
                        new
                        {
                            Id = 14L,
                            ParentId = 1L,
                            Value = "Video"
                        },
                        new
                        {
                            Id = 15L,
                            ParentId = 1L,
                            Value = "Archives"
                        },
                        new
                        {
                            Id = 16L,
                            ParentId = 1L,
                            Value = "Code"
                        },
                        new
                        {
                            Id = 17L,
                            ParentId = 1L,
                            Value = "Data"
                        },
                        new
                        {
                            Id = 18L,
                            ParentId = 1L,
                            Value = "Design"
                        },
                        new
                        {
                            Id = 101L,
                            ParentId = 11L,
                            Value = ".txt"
                        },
                        new
                        {
                            Id = 102L,
                            ParentId = 11L,
                            Value = ".pdf"
                        },
                        new
                        {
                            Id = 103L,
                            ParentId = 11L,
                            Value = ".doc"
                        },
                        new
                        {
                            Id = 104L,
                            ParentId = 11L,
                            Value = ".docx"
                        },
                        new
                        {
                            Id = 105L,
                            ParentId = 11L,
                            Value = ".xls"
                        },
                        new
                        {
                            Id = 106L,
                            ParentId = 11L,
                            Value = ".xlsx"
                        },
                        new
                        {
                            Id = 107L,
                            ParentId = 11L,
                            Value = ".ppt"
                        },
                        new
                        {
                            Id = 108L,
                            ParentId = 11L,
                            Value = ".pptx"
                        },
                        new
                        {
                            Id = 109L,
                            ParentId = 11L,
                            Value = ".odt"
                        },
                        new
                        {
                            Id = 110L,
                            ParentId = 11L,
                            Value = ".ods"
                        },
                        new
                        {
                            Id = 111L,
                            ParentId = 11L,
                            Value = ".odp"
                        },
                        new
                        {
                            Id = 112L,
                            ParentId = 11L,
                            Value = ".md"
                        },
                        new
                        {
                            Id = 113L,
                            ParentId = 11L,
                            Value = ".rtf"
                        },
                        new
                        {
                            Id = 201L,
                            ParentId = 12L,
                            Value = ".jpg"
                        },
                        new
                        {
                            Id = 202L,
                            ParentId = 12L,
                            Value = ".jpeg"
                        },
                        new
                        {
                            Id = 203L,
                            ParentId = 12L,
                            Value = ".png"
                        },
                        new
                        {
                            Id = 204L,
                            ParentId = 12L,
                            Value = ".gif"
                        },
                        new
                        {
                            Id = 205L,
                            ParentId = 12L,
                            Value = ".bmp"
                        },
                        new
                        {
                            Id = 206L,
                            ParentId = 12L,
                            Value = ".svg"
                        },
                        new
                        {
                            Id = 207L,
                            ParentId = 12L,
                            Value = ".webp"
                        },
                        new
                        {
                            Id = 208L,
                            ParentId = 12L,
                            Value = ".tiff"
                        },
                        new
                        {
                            Id = 209L,
                            ParentId = 12L,
                            Value = ".ico"
                        },
                        new
                        {
                            Id = 301L,
                            ParentId = 13L,
                            Value = ".mp3"
                        },
                        new
                        {
                            Id = 302L,
                            ParentId = 13L,
                            Value = ".wav"
                        },
                        new
                        {
                            Id = 303L,
                            ParentId = 13L,
                            Value = ".ogg"
                        },
                        new
                        {
                            Id = 304L,
                            ParentId = 13L,
                            Value = ".flac"
                        },
                        new
                        {
                            Id = 305L,
                            ParentId = 13L,
                            Value = ".m4a"
                        },
                        new
                        {
                            Id = 306L,
                            ParentId = 13L,
                            Value = ".aac"
                        },
                        new
                        {
                            Id = 401L,
                            ParentId = 14L,
                            Value = ".mp4"
                        },
                        new
                        {
                            Id = 402L,
                            ParentId = 14L,
                            Value = ".avi"
                        },
                        new
                        {
                            Id = 403L,
                            ParentId = 14L,
                            Value = ".mkv"
                        },
                        new
                        {
                            Id = 404L,
                            ParentId = 14L,
                            Value = ".mov"
                        },
                        new
                        {
                            Id = 405L,
                            ParentId = 14L,
                            Value = ".wmv"
                        },
                        new
                        {
                            Id = 406L,
                            ParentId = 14L,
                            Value = ".webm"
                        },
                        new
                        {
                            Id = 501L,
                            ParentId = 15L,
                            Value = ".zip"
                        },
                        new
                        {
                            Id = 502L,
                            ParentId = 15L,
                            Value = ".rar"
                        },
                        new
                        {
                            Id = 503L,
                            ParentId = 15L,
                            Value = ".7z"
                        },
                        new
                        {
                            Id = 504L,
                            ParentId = 15L,
                            Value = ".tar"
                        },
                        new
                        {
                            Id = 505L,
                            ParentId = 15L,
                            Value = ".gz"
                        },
                        new
                        {
                            Id = 601L,
                            ParentId = 16L,
                            Value = ".cs"
                        },
                        new
                        {
                            Id = 602L,
                            ParentId = 16L,
                            Value = ".js"
                        },
                        new
                        {
                            Id = 603L,
                            ParentId = 16L,
                            Value = ".ts"
                        },
                        new
                        {
                            Id = 604L,
                            ParentId = 16L,
                            Value = ".html"
                        },
                        new
                        {
                            Id = 605L,
                            ParentId = 16L,
                            Value = ".css"
                        },
                        new
                        {
                            Id = 606L,
                            ParentId = 16L,
                            Value = ".json"
                        },
                        new
                        {
                            Id = 607L,
                            ParentId = 16L,
                            Value = ".xml"
                        },
                        new
                        {
                            Id = 608L,
                            ParentId = 16L,
                            Value = ".py"
                        },
                        new
                        {
                            Id = 609L,
                            ParentId = 16L,
                            Value = ".java"
                        },
                        new
                        {
                            Id = 610L,
                            ParentId = 16L,
                            Value = ".php"
                        },
                        new
                        {
                            Id = 611L,
                            ParentId = 16L,
                            Value = ".sql"
                        },
                        new
                        {
                            Id = 612L,
                            ParentId = 16L,
                            Value = ".sh"
                        },
                        new
                        {
                            Id = 701L,
                            ParentId = 17L,
                            Value = ".csv"
                        },
                        new
                        {
                            Id = 702L,
                            ParentId = 17L,
                            Value = ".xls"
                        },
                        new
                        {
                            Id = 703L,
                            ParentId = 17L,
                            Value = ".xlsx"
                        },
                        new
                        {
                            Id = 704L,
                            ParentId = 17L,
                            Value = ".xml"
                        },
                        new
                        {
                            Id = 705L,
                            ParentId = 17L,
                            Value = ".json"
                        },
                        new
                        {
                            Id = 706L,
                            ParentId = 17L,
                            Value = ".sqlite"
                        },
                        new
                        {
                            Id = 707L,
                            ParentId = 17L,
                            Value = ".accdb"
                        },
                        new
                        {
                            Id = 801L,
                            ParentId = 18L,
                            Value = ".psd"
                        },
                        new
                        {
                            Id = 802L,
                            ParentId = 18L,
                            Value = ".ai"
                        },
                        new
                        {
                            Id = 803L,
                            ParentId = 18L,
                            Value = ".xd"
                        },
                        new
                        {
                            Id = 804L,
                            ParentId = 18L,
                            Value = ".fig"
                        },
                        new
                        {
                            Id = 805L,
                            ParentId = 18L,
                            Value = ".sketch"
                        });
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("ArchivedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("WorkspaceId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("WorkspaceId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.BoardAccess", b =>
                {
                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("BoardId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("BoardsAccesses", (string)null);
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.ResetToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("TokenHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ResetTokens");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Owner"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 3L,
                            Name = "Member"
                        },
                        new
                        {
                            Id = 4L,
                            Name = "Guest"
                        });
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Status", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<string>("ColorHex")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("TaskLimit")
                        .HasColumnType("int");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AssigneeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<float>("Weight")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AssigneeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.TaskTag", b =>
                {
                    b.Property<long>("TagId")
                        .HasColumnType("bigint");

                    b.Property<long>("TaskId")
                        .HasColumnType("bigint");

                    b.HasKey("TagId", "TaskId");

                    b.HasIndex("TaskId");

                    b.ToTable("TaskTags", (string)null);
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("varbinary(256)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasMaxLength(48)
                        .HasColumnType("varbinary(48)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Workspace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Workspaces");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.WorkspaceAccess", b =>
                {
                    b.Property<long>("WorkspaceId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("WorkspaceId", "UserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("WorkspaceAccesses");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.AllowedType", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.Board", "Board")
                        .WithMany()
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fragmenta.Dal.Models.AttachmentType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Attachment", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.Task", "Task")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fragmenta.Dal.Models.AttachmentType", "Type")
                        .WithMany("Attachments")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fragmenta.Dal.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Task");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.AttachmentType", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.AttachmentType", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Board", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.Workspace", "Workspace")
                        .WithMany("Boards")
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.BoardAccess", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.Board", "Board")
                        .WithMany("AccessList")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fragmenta.Dal.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.RefreshToken", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.ResetToken", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Status", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.Board", "Board")
                        .WithMany("Statuses")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Tag", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.Board", "Board")
                        .WithMany("Tags")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Board");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Task", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.User", "Assignee")
                        .WithMany()
                        .HasForeignKey("AssigneeId");

                    b.HasOne("Fragmenta.Dal.Models.Status", "Status")
                        .WithMany("Tasks")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Assignee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.TaskTag", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.Tag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Fragmenta.Dal.Models.Task", "Task")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tag");

                    b.Navigation("Task");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.WorkspaceAccess", b =>
                {
                    b.HasOne("Fragmenta.Dal.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fragmenta.Dal.Models.User", "User")
                        .WithMany("WorkspaceAccesses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Fragmenta.Dal.Models.Workspace", "Workspace")
                        .WithMany()
                        .HasForeignKey("WorkspaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");

                    b.Navigation("Workspace");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.AttachmentType", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("Children");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Board", b =>
                {
                    b.Navigation("AccessList");

                    b.Navigation("Statuses");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Status", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Task", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.User", b =>
                {
                    b.Navigation("WorkspaceAccesses");
                });

            modelBuilder.Entity("Fragmenta.Dal.Models.Workspace", b =>
                {
                    b.Navigation("Boards");
                });
#pragma warning restore 612, 618
        }
    }
}
